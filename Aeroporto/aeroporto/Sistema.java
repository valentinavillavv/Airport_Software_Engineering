/*
* This code has been generated by the Rebel: a code generator for modern Java.
*
* Drop us a line or two at feedback@archetypesoftware.com: we would love to hear from you!
*/
package aeroporto;

import java.util.*;

import eccezioni.GateNonDisponibileException;


import java.text.*;

// ----------- << imports@AAAAAAF+T15Y5Qz+lkI= >>
// ----------- >>

// ----------- << class.annotations@AAAAAAF+T15Y5Qz+lkI= >>
// ----------- >>
public class Sistema {
	//----------------------------------------------------------------------------------------------INIZIALIZZAZIONE VARIABILI---
    
	// ----------- << attribute.annotations@AAAAAAF+V+kDQw9/hDA= >>
    // ----------- >>
    private static Sistema ilSistema;
    
    // ----------- << attribute.annotations@AAAAAAF+T15Y5Q0Bw2k= >>
    // ----------- >>
    private Set<Aereo> listaAerei = new HashSet<>();

    // ----------- << attribute.annotations@AAAAAAF+T15Y5Q0EEPI= >>
    // ----------- >>
    private Set<Volo> listaVoli = new HashSet<>();

    // ----------- << attribute.annotations@AAAAAAF+T15Y5Q0Hc30= >>
    // ----------- >>
    private Set<Prenotazione> listaPrenotazioni = new HashSet<>();
	
    //Creazione dei gate, supponiamo che siano un numero fisso 
	Gate gate1 = new Gate();
	Gate gate2 = new Gate();
	Gate gate3 = new Gate();
	Gate gate4 = new Gate();
	Gate gate5 = new Gate();
	Gate gate6 = new Gate();
	Gate gate7 = new Gate();
  
    //----------------------------------------------------------------------------------------------------------METODI SET/GET---
    public Set<Aereo> getListaAerei() {
        return listaAerei;
    }

    public Set<Volo> getListaVoli() {
        return listaVoli;
    }

    public Set<Prenotazione> getListaPrenotazioni() {
        return listaPrenotazioni;
    }
    // ----------- << method.annotations@AAAAAAF+T15Y5g0Zh9o= >>
    // ----------- >>
    public static Sistema getSistema() {
    // ----------- << method.body@AAAAAAF+T15Y5g0Zh9o= >>
		if (ilSistema == null)
			ilSistema = new Sistema();
		return ilSistema;
	// ----------- >>
    }
  //----------------------------------------------------------------------------------------------------------METODI THEREIS---
    public boolean thereIsVolo() {//c'è almeno un volo
    	Iterator<Volo> lista = listaVoli.iterator();
    	if(lista.hasNext()){
    		return true;
    	}
    	else return false;
    }
    
    public boolean thereIsPrenotazione() {//c'è almeno una prenotazione
    	Iterator<Prenotazione> lista = listaPrenotazioni.iterator();
    	if(lista.hasNext()){
    		return true;
    	}
    	else return false;
    }
    
    public boolean thereIsAereo(String var) {//c'è almeno un aereo
    	Iterator<Aereo> lista = listaAerei.iterator();
    	boolean controllo=false;
    	if(var.equals("needCarburante")) {
        	while(lista.hasNext()){
        		Aereo a=lista.next();
        		if(a.isNeedCarburante()) {
        			controllo=true;
        		}	
        	}
        	return controllo;
    	}
    	else if(var.equals("nonAssegnato")) {
        	while(lista.hasNext()){
        		Aereo a=lista.next();
        		if(!a.isAssegnato()) {
        			controllo=true;
        		}	
        	}
        	return controllo;
    	}
    	else {
        	if(lista.hasNext()){
        		return true;
        	}
        	else return false;
    	}

    }
    //----------------------------------------------------------------------------------------------------------METODI STAMPA---
    public void stampaVoli(String tipoAereo) {
    	Iterator<Volo> lista = listaVoli.iterator();
    	if(lista.hasNext()) {
    		if(tipoAereo.equals("Linea")) {
    			System.out.println("I voli disponibili sono: ");
    			while(lista.hasNext()) {//Stampa i voli disponibili e i loro ID
    		    	Volo vStampa=lista.next();
    		    	if(vStampa.getAereo() instanceof Linea) {
    		    		System.out.print(vStampa.getID()+"       ");
    			    	System.out.println(vStampa.getDestinazione());
    		    	}
    		    }
        	}
        	else if(tipoAereo.equals("Cargo")) {
    			System.out.println("I voli disponibili sono: ");
    			while(lista.hasNext()) {//Stampa i voli disponibili e i loro ID
    		    	Volo vStampa=lista.next();
    		    	if(vStampa.getAereo() instanceof Cargo) {
    		    		System.out.print(vStampa.getID()+"       ");
    			    	System.out.println(vStampa.getDestinazione());
    		    	}
    		    }
        	}
        	else {
    			System.out.println("I voli disponibili sono: ");
    			while(lista.hasNext()) {//Stampa i voli disponibili e i loro ID
    		    	Volo vStampa=lista.next();
    		    	System.out.print(vStampa.getID()+"       ");
    			    System.out.println(vStampa.getDestinazione());
    		    }
        	}
    	}
    	else {
    		System.out.println("Non ci sono voli disponibili");
    	}
    	
    }
    	
    
    public void stampaAerei(String var) {
    	Iterator<Aereo> lista = listaAerei.iterator();
    	if(var.equals("needCarburante")) {//Stampa solo quelli a cui serve carburante
			System.out.println("Gli aerei che necessitano di carburante sono: ");
			while(lista.hasNext()) {//Stampa i voli disponibili e i loro ID
		    	Aereo a=lista.next();
		    	if(a.isNeedCarburante()) {
			    	System.out.println(a.getID());
		    	}
		    }
    	}
    	else if(var.equals("nonAssegnato")) {
    		System.out.println("Gli aerei disponibili sono: ");
			while(lista.hasNext()) {//Stampa i voli disponibili e i loro ID
		    	Aereo a=lista.next();
		    	if(!a.isAssegnato()) {
			    	System.out.println(a.getID());
		    	}
		    }
    	}
    	else {
    		System.out.println("Gli aerei disponibili sono: ");
			while(lista.hasNext()) {//Stampa i voli disponibili e i loro ID
		    	Aereo a=lista.next();
			    System.out.println(a.getID());
		    }
    	}
    }
    
    public void assegnaAereo(Volo volo, String idAereo) {
    	Iterator<Aereo> listaA = listaAerei.iterator();
    	boolean test = false;

    		//Controlliamo che venga inserito un IDAereo valido
    		listaA = listaAerei.iterator();
    		while(listaA.hasNext()) {
    			Aereo a = listaA.next();
    			if(a.getID().equals(idAereo) && a.isAssegnato() == false) {
    				volo.setAereo(a);
    				a.setAssegnato(true);
    				a.setVolo(volo);
    				test = true;
    				break;
    			} 
    		}
    		
    		if (!test) {
    			System.out.println("Aereo già assegnato o ID non valido!");
    		}
	}
    
    //-------------------------------------------------------------------------------------MANUTENZIONE: METODO ADD_CARBURANTE---
    // ----------- << method.annotations@AAAAAAF+T15Y5Q0M1LA= >>
    // ----------- >>
    public void addCarburante(String IDAereo) {
    // ----------- << method.body@AAAAAAF+T15Y5Q0M1LA= >>
    	Iterator<Aereo> lista = listaAerei.iterator();
    	
    	while(lista.hasNext()) {
    		Aereo a = lista.next();
    		if(a.getID().equals(IDAereo)) {
    			a.setNeedCarburante(false);
    			System.out.println("L'aereo " + a.getID() + " ha fatto il pieno");
    		} else {
    			System.out.println("L'ID inserito non corrisponde a nessun aereo!");
    		}
    	}
    // ----------- >>
    }
    
    //-------------------------------------------------------------------------------------------TDC: METODO ATTERRAGGIO_AEREO---
    // ----------- << method.annotations@AAAAAAF+T15Y5Q0Q+6w= >>
    // ----------- >>
    public void atterraggio(String lOrC,int kgMax, int nPass) {//Parametro che ci dice se atterra un volo di linea o cargo.
    // ----------- << method.body@AAAAAAF+T15Y5Q0Q+6w= >>
    	switch (lOrC) {
		case "1"://Faccio atterrare un aereo di linea
		{
			try {
				Linea l = new Linea(nPass);//Si usa il costruttore Linea()
				listaAerei.add(l);
				System.out.println("Aereo Atterrato!");
			} catch (GateNonDisponibileException e) {
				e.printStackTrace();
			}
			break;
		}
		case "2"://Faccio atterrare un aereo cargo
		{
			try {
				Cargo c = new Cargo(kgMax);//Si usa il costruttore Cargo()
				listaAerei.add(c);
				System.out.println("Aereo Atterrato!");
			} catch (GateNonDisponibileException e) {
				e.printStackTrace();
			}
			break;
		}

		default:
		{
			System.out.println("Selezione non valida");
			break;
		}
		}
    // ----------- >>
    }
    //-----------------------------------------------------------------------------------------------TDC: METODO DECOLLO_AEREO---
    // ----------- << method.annotations@AAAAAAF+T15Y5Q0O21E= >>
    // ----------- >>
    public void decolloAereo(String IDAereo) {
    // ----------- << method.body@AAAAAAF+T15Y5Q0O21E= >>
    	Iterator<Aereo> lista = listaAerei.iterator();
    	boolean controllo=false;
    	while(lista.hasNext()) {
    		Aereo a = lista.next();
    		System.out.println(a.getID());
    		if(a.getID().equals(IDAereo)) {
    			if(!a.isNeedCarburante()) {
    				if(a.isAssegnato()) {//L'aereo può decollare 
    					cancellaVolo(a.getVolo().getID());
    					lista.remove();
    					controllo=true;
    					System.out.println("Aereo " + IDAereo +" decollato\n");
    				} else {//Bisogna assegnare un volo all'aereo prima di farlo decollare
						System.out.println("L'aereo non ha un volo assegnato\n");
						controllo=true;
						break;
					}
    			} else {//Bisogna fare carburante all'aereo prima di farlo decollare
    				System.out.println("L'aereo non ha carburante\n");
    				controllo=true;
    				break;
    			}
    		}
    	}
    	if(!controllo) {
    		System.out.println("ID inserito non valido\n");
    	}
    // ----------- >>
    }
    //--------------------------------------------------------------------------------------AMMINISTRAZIONE: METODO NUOVO_VOLO---
    // ----------- << method.annotations@AAAAAAF+T15Y5Q0RNbc= >>
    // ----------- >>
    public void nuovoVolo(String idAereo, String destinazione, Date partenza, Date arrivo, String nomeComandante, String cognomeComandante, String nomeCopilota, String cognomeCopilota) {
    // ----------- << method.body@AAAAAAF+T15Y5Q0RNbc= >>
    	boolean controllo = false;
    	Iterator<Aereo> lista = listaAerei.iterator();
    	while (lista.hasNext()) {
    		if(lista.hasNext() && lista.next().getID().equals(idAereo)) {//Controlla se c'è un aereo con l'ID inserito
        		Volo volo = new Volo(destinazione, partenza, arrivo, nomeComandante, cognomeComandante, nomeCopilota, cognomeCopilota); 
        		assegnaAereo(volo,idAereo);
            	listaVoli.add(volo); 
            	controllo = true;
            	break;
        	}
    	}
    	if (!controllo) {//Non ci sono aerei disponibili per essere assegnati al volo
			System.out.println("L'ID inserito non è valido\n");
    	}
    // ----------- >>
    }
    
    //-----------------------------------------------------------------------------------AMMINISTRAZIONE: METODO MODIFICA_VOLO---
    // ----------- << method.annotations@AAAAAAF+T15Y5g0XtCk= >>
    // ----------- >>
    public void modificaVolo(String IDVolo,String nuovaDest) {
    // ----------- << method.body@AAAAAAF+T15Y5g0XtCk= >>
    	boolean voloTrovato=false;
    	Iterator<Volo> lista = listaVoli.iterator();
        while(lista.hasNext()) {
        	Volo v = lista.next();
        	if(v.getID().equals(IDVolo)) {
        		v.modificaVolo(nuovaDest);
        		voloTrovato=true;
        		System.out.println("Modifica completata!\n");
        		break;
        	}
       	}	
        if(!voloTrovato) {
        	System.out.println("L'ID inserito non corrisponde a nessun volo!\n");
        }
    // ----------- >>
    }
    
    //-----------------------------------------------------------------------------------AMMINISTRAZIONE: METODO CANCELLA_VOLO---
    // ----------- << method.annotations@AAAAAAF+V+8tWz1/I68= >>
    // ----------- >>
    private boolean cancellaVolo(String IDVolo) {
    // ----------- << method.body@AAAAAAF+V+8tWz1/I68= >>
    	Iterator<Volo> lista=listaVoli.iterator();
    	Iterator<Prenotazione> listaP=listaPrenotazioni.iterator();
    	while(lista.hasNext()) {
    		Volo v = lista.next();
    		if(v.getID().equals(IDVolo)) {//Troviamo il volo con l'ID inserito 
    			while(listaP.hasNext()) {
    				Prenotazione p=listaP.next();
    				if(p.getVolo().getID().equals(v.getID())){//Se la prenotazione è sul volo da cancellare
    				v.cancellaPrenotazioneVolo(p.getIDBiglietto());//Cancelliamo le prenotazioni riferite al volo che stiamo per cancellare
    				listaP.remove();
    				}
    			}
    			lista.remove();//Cancelliamo il volo dalla lista
    			return true;
    		}
    	}
    	return false;
    // ----------- >>
    }
    
    //---------------------------------------------------------------------------------------------CLIENTE: METODO RICERCA_VOLO---
  	public void ricercaVoli(String destinazione) {
  		Iterator<Volo> lista=listaVoli.iterator();
  		boolean voloDisp=false;
  		
  		while(lista.hasNext()) {
  			Volo v = lista.next();
  			if(v.getDestinazione().equals(destinazione)& v.getAereo() instanceof Linea) {
  				voloDisp=true;
  				break;
  			}
  		}
  		if(voloDisp) {
  			lista=listaVoli.iterator();
  	  		System.out.println("I voli diretti a "+destinazione+" sono:");
  	      	while(lista.hasNext())
  	      	{
  	      		Volo v = lista.next();
  	      		if(v.getDestinazione().equals(destinazione)& v.getAereo() instanceof Linea)//Mostriamo solo gli aerei di linea
  	      		{
  	      			System.out.print(v.getID()+"                 ");
  	      			DateFormat formatoData = DateFormat.getDateInstance(DateFormat.SHORT, Locale.ITALY);
  	      			System.out.println(formatoData.format(v.getDataPartenza()));
  	      		}
  	      	}
  		}
  		else {
  			System.out.println("Non ci sono voli per questa destinazione\n");
  		}
  	}
  	
    //--------------------------------------------------------------------------------------------CLIENTE: METODO PRENOTA_VOLO---
    // ----------- << method.annotations@AAAAAAF+T15Y5Q0SubE= >>
    // ----------- >>
    public void prenotaVolo(String IDVolo, String nome, String cognome, String nCartaId, int nBagagli, boolean priorita, Date nascita) {
    // ----------- << method.body@AAAAAAF+T15Y5Q0SubE= >>
    	Iterator<Volo> lista = listaVoli.iterator();
    	boolean idgiusto=false;
    	if(lista.hasNext()) {
    		while(lista.hasNext()) {
        		Volo v = lista.next();
        		if(v.getID().equals(IDVolo) & v.getNPasseggeri()<v.getAereo().getNPasseggeriMax()) {//Trovo il volo e 
        			//																	controllo se ci sono posti disponibili
        			System.out.println("Stai prenotando il volo: "+ IDVolo);
        			Prenotazione p1=new Prenotazione(v.getID(),nome,cognome,nCartaId,nBagagli,priorita,nascita);//Chiamo il costruttore di prenotazione
        			p1.setVolo(v);
        			v.getlistaPasseggeri().add(p1);//Aggiungo la prenotazione alla lista dei passeggeri del volo
        			ilSistema.listaPrenotazioni.add(p1);//Aggiungo la prenotazione alla lista prenotazioni totale del sistema
        			System.out.println("prenotazione avvenuta con successo, il tuo id_biglietto è: "+p1.getIDBiglietto());
        			idgiusto=true;
        			break;
        		} else if(v.getID().equals(IDVolo) & v.getNPasseggeri()>=v.getAereo().getNPasseggeriMax()) {//Volo al completo
        			System.out.println("Il volo è al completo");
        			idgiusto=true;
        			break;
        		}
        	}
    		if(!idgiusto) {
    			System.out.println("L'ID inserito non corrisponde a nessun volo!\n");
    		}
    	}
    // ----------- >>
    }
    //-----------------------------------------------------------------------------------CLIENTE: METODO MODIFICA_PRENOTAZIONE---
    // ----------- << method.annotations@AAAAAAF+T15Y5Q0UnWo= >>
    // ----------- >>
    public void modificaPrenotazione(String IDBiglietto, String nCartaIdentita) {
    // ----------- << method.body@AAAAAAF+T15Y5Q0UnWo= >>
    	Iterator<Prenotazione> lista = listaPrenotazioni.iterator();
        	while(lista.hasNext()) {
        		Prenotazione p = lista.next();
        		if(p.getIDBiglietto().equals(IDBiglietto) & p.getNCartaIdentita().equals(nCartaIdentita) ) {
        			System.out.println("Inserimento certificazione Cov-19");
        			p.inserisciCertificazione();		
        		} else {
        			System.out.println("L'ID o il numero di carta inseriti non corrisponde a nessuna prenotazione!");
        		}
        	}
    // ----------- >>
    }

    //-----------------------------------------------------------------------------------CLIENTE: METODO CANCELLA_PRENOTAZIONE---
    // ----------- << method.annotations@AAAAAAF+V+3RsytTxFY= >>
    // ----------- >> 
    public boolean cancellaPrenotazione(String IDBiglietto) {
    // ----------- << method.body@AAAAAAF+V+3RsytTxFY= >>
    	Volo MioVolo=null;
    	Prenotazione p1=null;
    	boolean prenTrovata=false;
    	Iterator<Prenotazione> lista=listaPrenotazioni.iterator();
    	while(lista.hasNext()) {
    		Prenotazione p= lista.next();
    		if(p.getIDBiglietto().equals(IDBiglietto)) {//Quando trovo il biglietto nella lista
    			prenTrovata=true;
    			p1=p;
    			MioVolo=p.getVolo(); 
    			lista.remove(); //rimuovo la prenotazione dalla lista di tutte le prenotazioni
    		} else {
    			System.out.println("Nessuna prenotazione con id: "+IDBiglietto+ " trovata, prenotazione inesistente. ");
    			return false;
    		}
    	}
    		
    	Iterator<Volo> voli= listaVoli.iterator();
    	if(prenTrovata) {//Se è stato trovato un biglietto con l'IDBiglietto inserito 
    		while(voli.hasNext()) {
	    		Volo v = voli.next();
	    		if(v.getID().equals(MioVolo.getID())) {//Trovo il volo a cui appartiene la prenotazione
	    			v.cancellaPrenotazioneVolo(p1.getIDBiglietto());//Tolgo la prenotazione dalla lista passeggeri del volo
			        System.out.println("Cancellazione avvenuta con successo\n");
	    		}
	    	}
    		return true;
    	} else {
    		return false;
		}
    // ----------- >>
    }
    
// ----------- << class.extras@AAAAAAF+T15Y5Qz+lkI= >>
// ----------- >>
}