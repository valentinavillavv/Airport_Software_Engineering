/*
* This code has been generated by the Rebel: a code generator for modern Java.
*
* Drop us a line or two at feedback@archetypesoftware.com: we would love to hear from you!
*/
package aeroporto;

import java.util.*;

// ----------- << imports@AAAAAAF+T15Y4wzXl/s= >>
// ----------- >>

// ----------- << class.annotations@AAAAAAF+T15Y4wzXl/s= >>
// ----------- >>
public class Volo {
	//----------------------------------------------------------------------------------------------INIZIALIZZAZIONE VARIABILI---
	private static Integer numero = 0;
	
    // ----------- << attribute.annotations@AAAAAAF+T15Y5AzevBs= >>
    // ----------- >>
    private String ID;

    // ----------- << attribute.annotations@AAAAAAF+T15Y5AzfBIs= >>
    // ----------- >>
    private String destinazione;

    // ----------- << attribute.annotations@AAAAAAF+T15Y5Azg1+Q= >>
    // ----------- >>
    private Date dataPartenza;

    // ----------- << attribute.annotations@AAAAAAF+T15Y5Azh5a4= >>
    // ----------- >>
    private Date dataArrivo;

    // ----------- << attribute.annotations@AAAAAAF+T15Y5AzkNd4= >>
    // ----------- >>
    private TipoVolo tipologia;

    // ----------- << attribute.annotations@AAAAAAF+T15Y5Azn00k= >>
    // ----------- >>
    private int nKg;
    
    // ----------- << attribute.annotations@AAAAAAF+T15Y5Azn00k= >>
    // ----------- >>
	@SuppressWarnings("unused")
	private int nPasseggeri;

    // ----------- << attribute.annotations@AAAAAAF+T15Y4wzak6g= >>
    // ----------- >>
    private Set<Pilota> listaPiloti = new HashSet<>();

    // ----------- << attribute.annotations@AAAAAAF+T15Y5AzdtMM= >>
    // ----------- >>
    private Aereo Aereo;

    // ----------- << attribute.annotations@AAAAAAF+T15Y5AzwoCI= >>
    // ----------- >>
    private Set<Prenotazione> listaPasseggeri = new HashSet<>();
    
    //----------------------------------------------------------------------------------------------------------METODI GET/SET---
    public String getID() {
        return ID;
    }

    public String getDestinazione() {
        return destinazione;
    }

    public Date getDataPartenza() {
        return dataPartenza;
    }

    public Date getDataArrivo() {
        return dataArrivo;
    }

    public TipoVolo getTipologia() {
        return tipologia;
    }

    public int getNKg() {
        return nKg;
    }
    
    public int getNPasseggeri() {
    	Iterator<Prenotazione> lista = listaPasseggeri.iterator();
    	int n=0;
    	if(lista.hasNext()) {
        	while(lista.hasNext()) {
        		lista.next();
        		n++;
        		}
        	}	
        return n;
    }

    public Set<Pilota> getListaPiloti() {
        return listaPiloti;
    }

    public Aereo getAereo() {
        return Aereo;
    }
    
    public Set<Prenotazione> getlistaPasseggeri() {
        return listaPasseggeri;
    }
   

    void setID(String ID) {
        this.ID = ID;
    }

    void setDestinazione(String destinazione) {
        this.destinazione = destinazione;
    }

    void setDataPartenza(Date dataPartenza) {
        this.dataPartenza = dataPartenza;
    }

    void setDataArrivo(Date dataArrivo) {
        this.dataArrivo = dataArrivo;
    }

    void setTipologia(TipoVolo tipologia) {
        this.tipologia = tipologia;
    }

    void setNKg(int nKg) {
        this.nKg = nKg;
    }
    
    void setNPasseggeri(int nPasseggeri) {
        this.nPasseggeri = nPasseggeri;
    }
    
    void setAereo(Aereo Aereo) {
        this.Aereo = Aereo;
    }

    //-------------------------------------------------------------------------------------------------------------COSTRUTTORE---
    // ----------- << method.annotations@AAAAAAF+T15Y5AzoCrQ= >>
    // ----------- >>
	public Volo(String destinazione, Date dataPartenza, Date dataArrivo, String nomeComandante, String cognomeComandante, String nomeCopilota, String cognomeCopilota){
    // ----------- << method.body@AAAAAAF+T15Y5AzoCrQ= >>
		setID("V-" + numero.toString());
    	numero++;
    	setDestinazione(destinazione);
    	setDataPartenza(dataPartenza);
    	setDataArrivo(dataArrivo);
    	setNPasseggeri(0);//Inizialmente ci sono 0 passeggeri
    	setNKg(0);//Inizialmente ci sono 0 kg di merce
    	Pilota comandante = new Pilota(true,nomeComandante,cognomeComandante);
    	Pilota copilota = new Pilota(false,nomeCopilota,cognomeCopilota);
    	listaPiloti.add(comandante);
    	listaPiloti.add(copilota);
    // ----------- >>
    }
    
    //----------------------------------------------------------------------------------------------------METODO MODIFICA_VOLO---
    // ----------- << method.annotations@AAAAAAF+T15Y5Azq+5o= >>
    // ----------- >>
	public void modificaVolo(String nuovaDest) {
    // ----------- << method.body@AAAAAAF+T15Y5Azq+5o= >>
    	this.destinazione = nuovaDest;
    // ----------- >>
    }
    //---------------------------------------------------------------------------------------METODO CANCELLA_PRENOTAZIONE_VOLO---
	public void cancellaPrenotazioneVolo(String IDPrenotazione) {
		Iterator<Prenotazione> lista= listaPasseggeri.iterator();
    	while(lista.hasNext()) {
    		Prenotazione p = lista.next();
    		if(p.getIDBiglietto().equals(IDPrenotazione)) {
    			lista.remove();
    			System.out.println("cancellazione dall'elenco passeggeri per il volo: "+ ID+ " avvenuta con successo.");
    		} else {
    			System.out.println("nessuna prenotazione con id="+IDPrenotazione+" sul volo "+ ID);}
    		}
	}
// ----------- << class.extras@AAAAAAF+T15Y4wzXl/s= >>
// ----------- >>
}
